general:
  name: "bert-based-uncased-m5-p3-v1"
  model_name: "bert-based-uncased"

  
# AWS and SageMaker settings
aws:
  region: us-east-1
  # uncomment and set the Role ARN if not running on sagemaker
  sagemaker_execution_role: arn:aws:iam::121797993273:role/fmbench-role
  ## these are the buckets/resources you will create in your account below:
  bucket: sagemaker-fmbench-write-121797993273 ## add the name of your desired bucket

## WRITE BUCKET -- Write the results, data, metrics, endpoint.json and payloads to this bucket directory
dir_paths:
    data_prefix: data ## add the prefix for all your data management/storage
    prompts_prefix: prompts
    all_prompts_file: all_prompts.csv
    metrics_dir: metrics
    models_dir: models
    metadata_dir: metadata ## add a file here to dynamically track the metrics dir

## READ BUCKET -- Represents the section to read from scripts, source data and tokenizer for a separate s3 bucket for read/write segregation
s3_read_data:
    read_bucket: sagemaker-fmbench-read-121797993273
    prompt_preprocess_dir: prompt_preprocess_scripts
    preprocess_func_files:
    - bert_payload_preprocess.py
    - llama_payload_preprocess.py
    inf_scripts_prefix: inference_scripts
    inference_script_files:
    - llama_mistral_inference.py ## inference for llama + mistral
    - bert_inference.py ## inference for bert based tc models
    scripts_prefix: scripts ## add your own scripts in case you are using anything that is not on jumpstart
    script_files:
    - hf_token.txt  ## add your scripts files you have in s3 (including inference files, serving stacks, if any)
    source_data_prefix: source_data  ## Add a source_data folder to store your raw data in an s3 path configured by you
    tokenizer_prefix: tokenizer ## add the tokenizer.json and config.json from your specific tokenizer type
    prompt_template_dir: prompt_template
    prompt_template_file: prompt_template.txt ## add your desired prompt template type

## section that enables container to run notebooks and python scripts automatically 
run_steps:
    1_generate_data.ipynb: yes ## set to yes if you are using the long bench data. if not, set to no, and enter your custom data pre processing script 
    2_deploy_model.ipynb: yes
    3_run_inference.ipynb: yes
    4_model_metric_analysis.ipynb: yes
    5_cleanup.ipynb: no

## to modify this based on 'bring-your-own-dataset'
datasets:
  - language: en    
    min_length_in_tokens: 1
    max_length_in_tokens: 500
    payload_file: payload_en_1-500.jsonl

## represents the preprocess function that takes each of the dataset payload and processes each row as a payload in the necessary format
process_prompt_function: bert_payload_preprocess.py ## adding it as a separate section for now since we need to focus on generating prompt payloads for one model type in one config file

metrics:
  dataset_of_interest: en_1-500
  weights:
    price_per_tx_wt: 0.65
    latenct_wt: 0.35
  
pricing:
  ml.m5.xlarge: 0.23
  ml.g5.2xlarge: 1.515
  ml.g5.12xlarge: 7.09
  ml.g5.24xlarge: 10.18
  ml.g5.48xlarge: 20.36
  ml.inf2.24xlarge: 7.79
  ml.inf2.48xlarge: 15.58
  ml.p4d.24xlarge: 37.688
  
inference_parameters:
  ContentType: "application/x-text"
  Accept: "application/json;verbose"

# Model configurations
experiments:
  - name: huggingface-tc-distilbert-base-uncased-pytorch-inference
    model_id: huggingface-tc-distilbert-base-uncased
    model_version: "*"
    model_name: distilbert-base-uncased
    ep_name: epdistilbert-base-uncased
    instance_type: "ml.m5.xlarge"
    image_uri: '763104351884.dkr.ecr.us-east-1.amazonaws.com/huggingface-pytorch-inference:1.10.2-transformers4.17.0-gpu-py38-cu113-ubuntu20.04'
    deploy: yes
    instance_count: 1
    deployment_script: jumpstart.py
    inference_script: bert_inference.py ## represents the inference script for bert
    payload_files:
    - payload_en_1-500.jsonl ## need to change this since the data is processed as payloads within a file called 'payload_en_1-500.jsonl' in s3

    concurrency_levels:
    - 1
    # - 2
    # - 4
    # - 6
    # - 8
    accept_eula: true
    env:
      SAGEMAKER_PROGRAM: "inference.py"
      ENDPOINT_SERVER_TIMEOUT: "3600"
      MODEL_CACHE_ROOT: "/opt/ml/model"
      SAGEMAKER_ENV: "1"
      SAGEMAKER_MODEL_SERVER_WORKERS: "1"

results:
  per_inference_request_file: per_inference_request_results.csv
  all_metrics_file: all_metrics.csv
